{
  "name": "ensemble-review-subflow",
  "nodes": [
    {
      "name": "mistral-review",
      "type": "httpRequest",
      "parameters": {
        "url": "https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.2",
        "method": "POST",
        "headers": {
          "Authorization": "Bearer {{HUGGINGFACE_API_KEY}}"
        },
        "body": "{ \"inputs\": \"{{ $json.script }}\" }",
        "options": {
          "sendBodyAs": "json"
        }
      }
    },
    {
      "name": "falcon-review",
      "type": "httpRequest",
      "parameters": {
        "url": "https://api-inference.huggingface.co/models/tiiuae/falcon-7b-instruct",
        "method": "POST",
        "headers": {
          "Authorization": "Bearer {{HUGGINGFACE_API_KEY}}"
        },
        "body": "{ \"inputs\": \"{{ $json.script }}\" }",
        "options": {
          "sendBodyAs": "json"
        }
      }
    },
    {
      "name": "flan-t5-review",
      "type": "httpRequest",
      "parameters": {
        "url": "https://api-inference.huggingface.co/models/google/flan-t5-xl",
        "method": "POST",
        "headers": {
          "Authorization": "Bearer {{HUGGINGFACE_API_KEY}}"
        },
        "body": "{ \"inputs\": \"{{ $json.script }}\" }",
        "options": {
          "sendBodyAs": "json"
        }
      }
    },
    {
      "name": "aggregate-review-judgment",
      "type": "code",
      "parameters": {
        "script": "const modelNames = ['mistral-review','falcon-review','flan-t5-review'];\nconst results = modelNames.map(n => $json[n] || {});\n\nconst reviewerVotes = {};\nconst flaggedIssues = new Set();\nconst suggestions = [];\nlet confidenceSum = 0;\nlet validCount = 0;\n\nresults.forEach((res, idx) => {\n  if (res.error || (res.statusCode && res.statusCode >= 400)) {\n    reviewerVotes[modelNames[idx]] = 0;\n    return;\n  }\n  let vote = res.confidence ?? 0.7;\n  if (vote > 1) vote = vote / 100;\n  confidenceSum += vote;\n  validCount++;\n  reviewerVotes[modelNames[idx]] = vote;\n  if (res.flags) res.flags.forEach(f => flaggedIssues.add(f));\n  if (res.suggestions) suggestions.push(...res.suggestions);\n});\n\nconst avg = validCount ? confidenceSum / validCount : 0;\nreturn [{\n  confidence_avg: avg,\n  risk_level: avg < 0.6 ? 'MEDIUM' : 'LOW',\n  flagged_issues: Array.from(flaggedIssues),\n  suggestions,\n  model_votes: reviewerVotes\n}];"
      }
    }
  ],
  "connections": {
    "mistral-review": [
      {
        "node": "aggregate-review-judgment",
        "type": "main",
        "index": 0
      }
    ],
    "falcon-review": [
      {
        "node": "aggregate-review-judgment",
        "type": "main",
        "index": 0
      }
    ],
    "flan-t5-review": [
      {
        "node": "aggregate-review-judgment",
        "type": "main",
        "index": 0
      }
    ]
  }
}
